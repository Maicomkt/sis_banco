class Banco:
    def __init__(self):
        self.saldo = 0
        self.saques_diarios = 0
        self.movimentacoes = []

    def deposito(self, valor):
        if valor > 0:
            self.saldo += valor
            self.movimentacoes.append(f'Depósito de {valor:.2f}')
            return f'Depósito de {valor:.2f} realizado. Saldo atual: {self.saldo:.2f}'
        else:
            return 'Valor inválido para depósito.'

    def saque(self, valor):
        if valor > 0 and valor <= 500 and self.saques_diarios < 3 and valor <= self.saldo:
            self.saldo -= valor
            self.saques_diarios += 1
            self.movimentacoes.append(f'Saque de {valor:.2f}')
            return f'Saque de {valor:.2f} realizado. Saldo atual: {self.saldo:.2f}'
        elif self.saques_diarios >= 3:
            return 'Limite de saques diários atingido.'
        elif valor > 500:
            return 'Limite máximo de R$ 500,00 por saque.'
        else:
            return 'Saldo insuficiente ou valor inválido para saque.'

    def extrato(self):
        historico = "\n".join(self.movimentacoes)
        return f'\n======= Extrato: =======\n\n{historico} \n\n========================\nSaldo atual: {self.saldo:.2f}' 
   
    


def main():
    banco = Banco()

    while True:
        print("\nEscolha uma operação:\n"
        "\n1 - Depósito\n"
        "2 - Saque\n"
        "3 - Extrato\n"
        "4 - Sair\n")

        escolha = int(input("Digite o número da operação desejada: "))

        if escolha == 1:
            valor = float(input("Digite o valor do depósito: "))
            print(banco.deposito(valor))
        elif escolha == 2:
            valor = float(input("Digite o valor do saque: "))
            print(banco.saque(valor))
        elif escolha == 3:
            print(banco.extrato())
        elif escolha == 4:
            print("Saindo do sistema.")
            break
        else:
            print("\nOperação falhou! O valor informado é inválido.")


if __name__ == "__main__":
    main()
